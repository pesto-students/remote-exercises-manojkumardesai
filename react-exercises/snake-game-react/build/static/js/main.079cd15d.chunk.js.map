{"version":3,"sources":["components/Configuration.js","components/GameTitle.js","App.js","useInterval.js","serviceWorker.js","index.js"],"names":["CANVAS_SIZE","SNAKE_START","COIN","DIRECTIONS","38","40","37","39","GameTitle","className","App","canvasRef","useRef","useState","snake","setSnake","coin","setCoin","dir","setDir","speed","setSpeed","gameOver","setGameOver","score","setScore","callback","delay","savedCallback","useEffect","current","id","setInterval","clearInterval","useInterval","gameLoop","createApple","map","_a","i","Math","floor","random","checkCollision","piece","snk","segment","checkCoinCollision","newSnake","newCoin","snakeCopy","newSnakeHead","unshift","pop","context","getContext","setTransform","clearRect","window","innerWidth","innerHeight","fillStyle","forEach","x","y","fillRect","onKeyDown","e","keyCode","moveSnake","ref","width","height","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.079cd15d.chunk.js","sourcesContent":["const CANVAS_SIZE = [500, 500];\nconst SNAKE_START = [\n    [8, 7],\n    [8, 8]\n];\nconst COIN = [8, 3];\nconst SCALE = 30;\nconst SPEED = 500;\nconst DIRECTIONS = {\n    38: [0, -1], // up\n    40: [0, 1], // down\n    37: [-1, 0], // left\n    39: [1, 0] // right\n};\n\nexport {\n    CANVAS_SIZE,\n    SNAKE_START,\n    COIN,\n    SCALE,\n    SPEED,\n    DIRECTIONS\n};","import React from \"react\";\nimport './GameTitle.css'\n\nconst GameTitle = () => {\n    return (\n        <div className=\"titleCard\">\n            <h3 className=\"title\">Ekans - The Snake Game</h3>\n        </div>\n    )\n}\n\nexport default GameTitle;","import React, { useState, useRef, useEffect } from \"react\";\nimport { useInterval } from \"./useInterval\";\nimport {\n  CANVAS_SIZE,\n  SNAKE_START,\n  COIN,\n  SCALE,\n  SPEED,\n  DIRECTIONS\n} from \"./components/Configuration\";\nimport './App.css';\nimport GameTitle from \"./components/GameTitle\";\n\nconst App = () => {\n  const canvasRef = useRef();\n  const [snake, setSnake] = useState(SNAKE_START);\n  const [coin, setCoin] = useState(COIN);\n  const [dir, setDir] = useState([0, -1]);\n  const [speed, setSpeed] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n\n  useInterval(() => gameLoop(), speed);\n\n  const endGame = () => {\n    setSpeed(null);\n    setGameOver(true);\n  };\n\n  const pauseGame = () => {\n    setSpeed(speed ? null : 400);\n  }\n\n  const incrementScore = () => {\n    setScore(score + 1);\n  }\n\n  const incrementSpeed = () => {\n    if (speed > 200) {\n      setSpeed(speed - 10);\n    }\n  }\n\n  const moveSnake = ({ keyCode }) => {\n    return keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\n  }\n    \n\n  const createApple = () => {\n    return coin.map((_a, i) => Math.floor(Math.random() * (CANVAS_SIZE[i] / SCALE)));\n  }\n    \n\n  const checkCollision = (piece, snk = snake) => {\n    if (\n      piece[0] * SCALE >= CANVAS_SIZE[0] ||\n      piece[0] < 0 ||\n      piece[1] * SCALE >= CANVAS_SIZE[1] ||\n      piece[1] < 0\n    ) {\n      return true;\n    }\n\n    for (const segment of snk) {\n      if (piece[0] === segment[0] && piece[1] === segment[1]) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const checkCoinCollision = newSnake => {\n    if (newSnake[0][0] === coin[0] && newSnake[0][1] === coin[1]) {\n      let newCoin = createApple();\n      while (checkCollision(newCoin, newSnake)) {\n        newCoin = createApple();\n      }\n      setCoin(newCoin);\n      incrementScore();\n      incrementSpeed();\n      return true;\n    }\n    return false;\n  };\n\n  const gameLoop = () => {\n    const snakeCopy = [...snake];\n    const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\n    snakeCopy.unshift(newSnakeHead);\n    if (checkCollision(newSnakeHead)) {\n      endGame();\n    } else if (!checkCoinCollision(snakeCopy)) {\n      snakeCopy.pop();\n    };\n    setSnake(snakeCopy);\n  };\n\n  const startGame = () => {\n    setSnake(SNAKE_START);\n    setCoin(COIN);\n    setDir([0, -1]);\n    setSpeed(SPEED);\n    setGameOver(false);\n    setScore(0);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, window.innerWidth, window.innerHeight);\n    context.fillStyle = \"lightblue\";\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n    context.fillStyle = \"yellow\";\n    context.fillRect(coin[0], coin[1], 1, 1);\n  }, [snake, coin, gameOver]);\n\n  return (\n    <div>\n      <GameTitle />\n      <div className=\"gameBoard\" onKeyDown={e => moveSnake(e)}>\n      <div>\n        <canvas\n          className=\"gameBorder\"\n          ref={canvasRef}\n          width={`${CANVAS_SIZE[0]}px`}\n          height={`${CANVAS_SIZE[1]}px`}\n        />\n        {gameOver && <div>GAME OVER!</div>}\n      </div>\n      <div className=\"gameControls\">\n        <p>Score: {score}</p>\n        <button onClick={startGame}> { gameOver ? 'Restart' : 'Start Game' }</button>\n        { score ? \n          <button onClick={pauseGame}> {speed ? 'Pause' : 'Resume'} </button> :\n          null\n        }\n      </div>\n    </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}